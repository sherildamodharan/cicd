pipeline {
  agent {
    docker {
      image 'sandams/maven-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock --network host'
      reuseNode true  // Critical for workspace access
    }
  }

  environment {
    SONAR_URL = "http://192.168.1.32:9000"
    GIT_REPO_NAME = "cicd"
    GIT_USER_NAME = "sherildamodharan"
    APP_PATH = "java-maven-sonar-argocd-helm-k8s/spring-boot-app"
    DOCKER_IMAGE = "sandams/spring-app:${BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        git(
          branch: 'main',
          url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git",
          credentialsId: 'github'  // Ensure this credential exists
        )
      }
    }

    stage('Build') {
      steps {
        dir("${APP_PATH}") {
          sh 'mvn clean package'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_TOKEN')]) {
          dir("${APP_PATH}") {
            sh """
              mvn sonar:sonar \
                -Dsonar.login=${SONAR_TOKEN} \
                -Dsonar.host.url=${SONAR_URL}
            """
          }
        }
      }
    }

    stage('Docker Build/Push') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'docker-cred',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          dir("${APP_PATH}") {
            sh """
              docker build -t ${DOCKER_IMAGE} .
              echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
              docker push ${DOCKER_IMAGE}
            """
          }
        }
      }
    }
  }

  post {
    always {
      // Safe cleanup without node requirements
      script {
        try {
          sh 'docker ps -aq | xargs --no-run-if-empty docker rm -f || true'
          cleanWs()
        } catch (e) {
          echo "Cleanup failed: ${e}"
        }
      }
    }
  }
}
