pipeline {
  agent {
    docker {
      image 'sandams/maven-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://192.168.1.32:9000"
    GIT_REPO_NAME = "cicd"
    GIT_USER_NAME = "sherildamodharan"
    APP_PATH = "java-maven-sonar-argocd-helm-k8s/spring-boot-app"
    DOCKER_IMAGE = "sandams/spring-app:${BUILD_NUMBER}"
  }

  stages {
    stage('Verify Setup') {
      steps {
        script {
          sh 'echo "Java version:" && java -version'
          sh 'echo "Maven version:" && mvn --version'
          sh 'echo "Docker version:" && docker --version'
          sh 'echo "SonarQube reachability:" && curl -I ${SONAR_URL} || true'
        }
      }
    }

    stage('Checkout') {
      steps {
        git branch: 'main', 
        url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git",
        credentialsId: 'github' // Make sure you have this credential setup
      }
    }

    stage('Build and Test') {
      steps {
        dir("${APP_PATH}") {
          sh 'mvn clean package'
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_TOKEN')]) {
          dir("${APP_PATH}") {
            sh """
              echo "SonarQube Token: ${SONAR_TOKEN? 'SET' : 'MISSING'}"
              mvn sonar:sonar \
                -Dsonar.login=${SONAR_TOKEN} \
                -Dsonar.host.url=${SONAR_URL} \
                -Dsonar.verbose=true
            """
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'docker-cred',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          dir("${APP_PATH}") {
            sh """
              echo "Building Docker image..."
              docker build -t ${DOCKER_IMAGE} .
              
              echo "Logging in to Docker Hub..."
              echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
              
              echo "Pushing image..."
              docker push ${DOCKER_IMAGE} || {
                echo "Push failed, retrying..."
                sleep 5
                docker push ${DOCKER_IMAGE}
              }
              
              echo "Image pushed successfully: ${DOCKER_IMAGE}"
            """
          }
        }
      }
    }

    stage('Update Deployment') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests') {
            sh """
              git config --global user.email "sherildamodharan@gmail.com"
              git config --global user.name "Sheril Damodharan"
              
              echo "Updating deployment to version ${BUILD_NUMBER}"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
              
              git status
              git diff
              
              git add deployment.yml
              git commit -m "Update to ${DOCKER_IMAGE}" || echo "No changes to commit"
              
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
            """
          }
        }
      }
    }
  }

  post {
    always {
      echo "Pipeline completed - collecting diagnostic info"
      sh 'docker images | grep sandams/spring-app'
      sh 'curl -I ${SONAR_URL} || true'
      cleanWs()
    }
    success {
      echo '✅ Pipeline succeeded'
      slackSend(color: 'good', message: "Pipeline succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
    }
    failure {
      echo '❌ Pipeline failed'
      slackSend(color: 'danger', message: "Pipeline failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
    }
  }
}
