pipeline {
  agent {
    docker {
      image 'sandams/maven-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://192.168.1.32:9000"
    GIT_REPO_NAME = "cicd"
    GIT_USER_NAME = "sherildamodharan"
    APP_PATH = "java-maven-sonar-argocd-helm-k8s/spring-boot-app"
    DOCKER_IMAGE = "sandams/spring-app:${BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
      }
    }

    stage('Build and Test') {
      steps {
        sh "cd ${APP_PATH} && mvn clean package"
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh """
            cd ${APP_PATH} && \
            mvn sonar:sonar \
              -Dsonar.login=$SONAR_AUTH_TOKEN \
              -Dsonar.host.url=${SONAR_URL}
          """
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh """
            cd ${APP_PATH} && \
            docker build -t ${DOCKER_IMAGE} . && \
            docker login -u $DOCKER_USER -p $DOCKER_PASS && \
            docker push ${DOCKER_IMAGE}
          """
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh """
            git config user.email "sherildamodharan@gmail.com"
            git config user.name "Sheril Damodharan"
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests && \
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml && \
            git add deployment.yml && \
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit" && \
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
          """
        }
      }
    }
  }

  post {
    always {
      echo 'Pipeline completed - cleaning workspace'
      cleanWs()
    }
    success {
      echo 'Pipeline completed successfully ✅'
    }
    failure {
      echo 'Pipeline failed ❌'
    }
  }
}
