pipeline {
  agent {
    docker {
      image 'sandams/maven-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
      reuseNode true  // Important for workspace cleanup
    }
  }

  environment {
    SONAR_URL = "http://192.168.1.32:9000"
    GIT_REPO_NAME = "cicd"
    GIT_USER_NAME = "sherildamodharan"
    APP_PATH = "java-maven-sonar-argocd-helm-k8s/spring-boot-app"
    DOCKER_IMAGE = "sandams/spring-app:${BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: "https://github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git"
      }
    }

    stage('Build and Test') {
      steps {
        dir("${APP_PATH}") {
          sh 'mvn clean package'
        }
      }
    }

    stage('Static Code Analysis and Unit Tests') {
      parallel {
        stage('Static Code Analysis') {
          environment {
            SONAR_TOKEN = credentials('sonarqube')
          }
          steps {
            dir("${APP_PATH}") {
              sh '''
                mvn sonar:sonar \
                  -Dsonar.login=${SONAR_TOKEN} \
                  -Dsonar.host.url=${SONAR_URL}
              '''
            }
          }
        }
        stage('Unit Tests') {
          steps {
            dir("${APP_PATH}") {
              sh 'mvn test'
            }
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        dir("${APP_PATH}") {
          script {
            sh "docker build -t ${DOCKER_IMAGE} ."
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
              docker.image("${DOCKER_IMAGE}").push()
            }
          }
        }
      }
    }

    stage('Update Deployment File and Push') {
      environment {
        GITHUB_TOKEN = credentials('github')
      }
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests') {
          sh '''
            git config user.email "sherildamodharan@gmail.com"
            git config user.name "Sheril Damodharan"
            sed -i.bak "s/replaceImageTag/${BUILD_NUMBER}/g" deployment.yml
            git add deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
          '''
          retry(3) {
            sh '''
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
            '''
          }
        }
      }
    }
  }

  post {
    always {
      script {
        // Cleanup on the main node, not inside the Docker container
        node('master') {
          cleanWs()
        }
      }
    }
    success {
      echo 'Pipeline completed successfully ✅'
    }
    failure {
      echo 'Pipeline failed ❌'
    }
  }
}
